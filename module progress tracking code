package com.example.riskassessment

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Menu
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.tooling.preview.Preview
import com.example.riskassessment.ui.theme.RiskAssessmentTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            RiskAssessmentTheme {
                Surface(modifier = Modifier.fillMaxSize(), color = Color(0xFF800000)) { // Maroon Background
                    MainScreen()
                }
            }
        }
    }
}

@Composable
fun MainScreen() {
    var studentName by remember { mutableStateOf("") }
    var studentProgress by remember { mutableStateOf("") }
    var errorMessage by remember { mutableStateOf("") } // To show an error if input is invalid

    // Initial list of students
    val students = remember {
        mutableStateListOf(
            "Arlene McCoy" to 75,
            "Cody Fisher" to 85,
            "Esther Howard" to 90,
            "Ronald Richards" to 60,
            "Albert Flores" to 70,
            "Marvin McKinney" to 50,
            "Floyd Miles" to 40,
            "Courtney Henry" to 65,
            "Guy Hawkins" to 80,
            "Ralph Edwards" to 90,
            "Devon Lane" to 95,
            "Jenny Wilson" to 55
        )
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("SmartScore AI", fontSize = 20.sp, color = Color.White) }, // White text color
                backgroundColor = Color(0xFF800000) // Maroon background
            )
        }
    ) { contentPadding ->
        Box(modifier = Modifier.padding(contentPadding)) {
            Column(
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxSize(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // Add New Student Form
                TextField(
                    value = studentName,
                    onValueChange = { studentName = it },
                    label = { Text("Enter Student Name", color = Color.Black) },
                    modifier = Modifier.fillMaxWidth(),
                    colors = TextFieldDefaults.textFieldColors(
                        backgroundColor = Color.Transparent,
                        focusedIndicatorColor = Color.Black,
                        unfocusedIndicatorColor = Color.Black,
                        textColor = Color.Black
                    )
                )

                Spacer(modifier = Modifier.height(8.dp))

                TextField(
                    value = studentProgress,
                    onValueChange = { studentProgress = it },
                    label = { Text("Enter Performance (%)", color = Color.Black) },
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                    modifier = Modifier.fillMaxWidth(),
                    colors = TextFieldDefaults.textFieldColors(
                        backgroundColor = Color.Transparent,
                        focusedIndicatorColor = Color.Black,
                        unfocusedIndicatorColor = Color.Black,
                        textColor = Color.Black
                    )
                )

                Spacer(modifier = Modifier.height(8.dp))

                // Add New Student Button with Maroon Background
                Button(
                    onClick = {
                        errorMessage = ""
                        if (studentName.isNotBlank() && studentProgress.isNotBlank()) {
                            val progressValue = studentProgress.toIntOrNull()
                            if (progressValue != null && progressValue in 0..100) {
                                students.add(studentName to progressValue)
                                studentName = ""
                                studentProgress = ""
                            } else {
                                errorMessage = "Enter a valid percentage (0-100)."
                            }
                        } else {
                            errorMessage = "Both fields are required."
                        }
                    },
                    colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF800000)), // Maroon color for the button
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text("Add New Student", color = Color.White) // White text color
                }

                Spacer(modifier = Modifier.height(8.dp))

                if (errorMessage.isNotEmpty()) {
                    Text(errorMessage, color = Color.Red, fontSize = 14.sp)
                }

                Spacer(modifier = Modifier.height(16.dp))

                // Display the student list
                LazyColumn {
                    items(students.size) { index ->
                        val (name, progress) = students[index]
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(8.dp),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(name, fontSize = 16.sp, color = Color.Black, modifier = Modifier.weight(1f))

                            // Row to place the exclamation mark and pie chart side by side
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                horizontalArrangement = Arrangement.Start
                            ) {
                                // Exclamation mark for students with risk above 70%
                                if (progress > 70) {
                                    Text(
                                        "‚ùó",
                                        fontSize = 20.sp,
                                        color = Color.Red,
                                        modifier = Modifier.padding(end = 8.dp) // Adjust space between exclamation and pie chart
                                    )
                                }

                                // Pie Chart (Canvas)
                                Canvas(
                                    modifier = Modifier
                                        .size(32.dp)
                                ) {
                                    drawArc(
                                        color = when {
                                            progress < 30 -> Color.Green
                                            progress < 70 -> Color.Yellow
                                            else -> Color.Red
                                        },
                                        startAngle = -90f,
                                        sweepAngle = progress * 3.6f,
                                        useCenter = true
                                    )
                                }
                            }

                            Text("$progress%", fontSize = 16.sp, color = Color.Black)
                        }
                        Divider(color = Color.Black)
                    }
                }
            }
        }
    }
}

@Composable
@Preview(showBackground = true)
fun PreviewMainScreen() {
    MainScreen()
}
